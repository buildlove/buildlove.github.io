<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>liyang&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/64eaa20be2574baea767edbc7295defc</icon>
  <subtitle>Stay hungry,stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://buildlove.github.io/"/>
  <updated>2019-02-28T05:14:47.355Z</updated>
  <id>http://buildlove.github.io/</id>
  
  <author>
    <name>Screenshot 2015</name>
    <email>mkdir_yang@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个简单的 vue 项目</title>
    <link href="http://buildlove.github.io/2018/06/27/vue-webpack-pro/"/>
    <id>http://buildlove.github.io/2018/06/27/vue-webpack-pro/</id>
    <published>2018-06-27T08:11:45.000Z</published>
    <updated>2019-02-28T05:14:47.355Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/buildlove/vue-practice">github源码</a></p><p>通过一个小产品总结过去一段时间的学习。</p><ul><li>vue 框架</li><li>webpack 打包单页面应用程序</li></ul><h2 id="产品效果"><a href="#产品效果" class="headerlink" title="产品效果"></a>产品效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/12240257-af0d58f3a845cad5.gif?imageMogr2/auto-orient/strip" alt="1.gif"></p><h2 id="需求分解"><a href="#需求分解" class="headerlink" title="需求分解"></a>需求分解</h2><p>第一页组件, 显示载入数据按钮点击之后显示第二页组件。</p><p>第二页嫌疑人详细信息列表<br>    1.带滚动条, 可以上下滚动<br>    2.在嫌疑人社会关系中点击联系人时, 会自动滚动到嫌疑人详细信息列表并添加背景颜色标记。<br>    3.嫌疑人组件支持左键单击, 状态为选中</p><p>第三页嫌疑人社会关系<br>    1.回退按钮, 记录每一次操作数据, 每次回退的时候删除数据。<br>    2.联系人, 选中后嫌疑人组件展示并选中列表项组件, 展示联系人详情。<br>    3.可以进一步点击联系人。 不论点击多少步都支持单步回退到起点。</p><h2 id="数据字段设计"><a href="#数据字段设计" class="headerlink" title="数据字段设计"></a>数据字段设计</h2><p>嫌疑人详细信息列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const Peopelist = [</span><br><span class="line">    &#123;name:&#x27;张三&#x27;,sex:&#x27;男&#x27;,phone:12345678&#125;,</span><br><span class="line">    &#123;name:&#x27;张三2&#x27;,sex:&#x27;男&#x27;,phone:12345678&#125;,</span><br><span class="line">    &#123;name:&#x27;张三3&#x27;,sex:&#x27;男&#x27;,phone:12345678&#125;,</span><br><span class="line">    &#123;name:&#x27;张三4&#x27;,sex:&#x27;男&#x27;,phone:12345678&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>嫌疑人社会关系详情</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ContactDetails = &#123;</span><br><span class="line">    &quot;张三&quot;: [&quot;张三2&quot;, &quot;张三3&quot;, &quot;张三4&quot;],</span><br><span class="line">    &quot;张三1&quot;: [&quot;张三&quot;, &quot;张三3&quot;, &quot;张三4&quot;],</span><br><span class="line">    &quot;张三2&quot;: [&quot;张三8&quot;, &quot;张三3&quot;, &quot;张三1&quot;],</span><br><span class="line">    &quot;张三3&quot;: [&quot;张三6&quot;, &quot;张三2&quot;, &quot;张三&quot;],</span><br><span class="line">    &quot;张三4&quot;: [&quot;张三2&quot;, &quot;张三3&quot;, &quot;张三5&quot;],</span><br><span class="line">    &quot;张三5&quot;: [&quot;张三3&quot;, &quot;张三3&quot;, &quot;张三7&quot;],</span><br><span class="line">    &quot;张三6&quot;: [&quot;张三4&quot;, &quot;张三3&quot;, &quot;张三&quot;],</span><br><span class="line">    &quot;张三7&quot;: [&quot;张三2&quot;, &quot;张三3&quot;],</span><br><span class="line">    &quot;张三8&quot;: [&quot;张三4&quot;],</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>1.创建一个 html 快速做出功能。</p><p>2.分解 html 和 vue 各个组件代码到对应目录。</p><p>3.引入 webpack, 配置 webpack 常用插件。</p><h3 id="开发步骤（1-0-0"><a href="#开发步骤（1-0-0" class="headerlink" title="开发步骤（1.0.0)"></a>开发步骤（1.0.0)</h3><p>1.引入 vue.js ( 通过 script 标签直接引入在线 cdn 文件), 实例化 vue 组件。</p><p>2.创建两个局部组件作为人物关系页&#x2F;人物详情页(局部&#x2F;全局组件知道就好)。</p><p>5.通过组件模板布局组件 html。</p><p>6.使用 css 给布局的 html 穿上衣服。</p><p>7.实现组件之间的父传子, 子传父通信。</p><p>8.使用 vue 基础语法实现数据的展示。</p><h3 id="开发步骤（2-0-0"><a href="#开发步骤（2-0-0" class="headerlink" title="开发步骤（2.0.0)"></a>开发步骤（2.0.0)</h3><p>1.拆分 css、js, 使用 style、script 标签引入。</p><p>2.拆分 vue 各个组件使用模块化方式引入。</p><p>3.使用 npm 来初始化项目引入 webpack 基本插件。</p><p>4.配置 webpack 的热更新、别名、开发&#x2F;生产环境等等。</p><blockquote><p>以上步骤只用于当前项目。</p></blockquote>]]></content>
    
    <summary type="html">
    
      通过一个小产品总结过去一段时间的学习。
    
    </summary>
    
    
      <category term="vue" scheme="http://buildlove.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>es6标准化检测</title>
    <link href="http://buildlove.github.io/2018/04/27/es6-checked/"/>
    <id>http://buildlove.github.io/2018/04/27/es6-checked/</id>
    <published>2018-04-27T08:12:38.000Z</published>
    <updated>2019-02-28T05:13:22.564Z</updated>
    
    <content type="html"><![CDATA[<p>webstorm 标准配置</p><span id="more"></span><p>打开 webstorm 进行设置 ( File &gt;&gt; setting &gt;&gt; Languages &amp; Frameworks &gt;&gt; JavaScript &gt;&gt; ECMAScript 6 )。</p><ul><li><p>当你设置好 es6 规范之后, 使用webstorm编程, 右边的语法检错几乎没有红色和黄色的报错的时候, 恭喜你, 你已经养成了使用 es6 标准编程的习惯。</p></li><li><p>jquery和其他的一些插件也有自己的 Typescript 验证模块, 如果不引入这些插件的验证模块可能会报白色错误(配置在第 12 个报错)。</p></li><li><p>本文所有的报错均为黄色或者白色报错，可能几乎不会影响程序的运行。</p></li></ul><h3 id="1-使用-var-作为声明变量的方法报错"><a href="#1-使用-var-作为声明变量的方法报错" class="headerlink" title="1. 使用 var 作为声明变量的方法报错"></a>1. 使用 var 作为声明变量的方法报错</h3><blockquote><p>注意: 改的时候注意 var 的变量提升。</p></blockquote><p>  es6 里面声明变量都改成 let 和 const, 如果使用 var 作为声明方法, webstorm 会报错。 <a href="http://es6.ruanyifeng.com/#docs/let"> let 和 var 的区别</a>。</p><h3 id="2-每行代码结束的时候不添加分号报错-使用-standardjs-标准的无视"><a href="#2-每行代码结束的时候不添加分号报错-使用-standardjs-标准的无视" class="headerlink" title="2. 每行代码结束的时候不添加分号报错(使用 standardjs 标准的无视)"></a>2. 每行代码结束的时候不添加分号报错(使用 standardjs 标准的无视)</h3><blockquote><p>注意: 并不是每行代码都加分号, 函数结尾的 ‘}’ 添加分号也会报黄色错误。</p></blockquote><h3 id="3-jquery选择器选择两次的情况下报错"><a href="#3-jquery选择器选择两次的情况下报错" class="headerlink" title="3. jquery选择器选择两次的情况下报错"></a>3. jquery选择器选择两次的情况下报错</h3><blockquote><p>注意: 以下的 $ 每出现一次代表一次 DOM 操作, DOM 频繁操作会影响浏览器性能。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  $(&quot;.select&quot;).addClass(&quot;active&quot;);</span><br><span class="line"></span><br><span class="line">  $(&quot;.select&quot;).removeClass(&quot;active&quot;);</span><br><span class="line"></span><br><span class="line">修改为</span><br><span class="line"></span><br><span class="line">  let select = $(&quot;.select&quot;); //这里只选择了一次。</span><br><span class="line"></span><br><span class="line">  select.addClass(&quot;active&quot;);</span><br><span class="line"></span><br><span class="line">  select.removeClass(&quot;active&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-使用”-x3D-x3D-”的报错"><a href="#4-使用”-x3D-x3D-”的报错" class="headerlink" title="4. 使用”&#x3D;&#x3D;”的报错"></a>4. 使用”&#x3D;&#x3D;”的报错</h3><ul><li><p>“&#x3D;&#x3D;” 叫相等运算符,  “&#x3D;&#x3D;&#x3D;” 叫严格等于运算符。</p></li><li><p>相等运算符会导致一些变量在值相等而类型不等的情况下出现问题。(具体情况自行百度, 我只能帮你到这里了)。</p></li></ul><p>  需要把两个等号”&#x3D;&#x3D;”的全部换成三个等号”&#x3D;&#x3D;&#x3D;”。</p><h3 id="5-三元运算符报错"><a href="#5-三元运算符报错" class="headerlink" title="5. 三元运算符报错"></a>5. 三元运算符报错</h3><blockquote><p>这里可能只是因为es6不许你这么用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">let isover = query.rowCount === -1 ? false : true; // 这种写法会有很大一条横线在整个语句下</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">let isover;</span><br><span class="line"></span><br><span class="line">query.rowCount === -1 ? isover = false : isover = true;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-一个表达式里面有多个-return-报错"><a href="#6-一个表达式里面有多个-return-报错" class="headerlink" title="6. 一个表达式里面有多个 return 报错"></a>6. 一个表达式里面有多个 return 报错</h3><blockquote><p>一般最后一个 return 下面会有很大一条白线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  function myfun () &#123;</span><br><span class="line"></span><br><span class="line">    let myNum = 1;</span><br><span class="line"></span><br><span class="line">    if( myNum )&#123;</span><br><span class="line"></span><br><span class="line">      return 2;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  改为</span><br><span class="line"></span><br><span class="line">  function myfun () &#123;</span><br><span class="line"></span><br><span class="line">    let myNum = 1;</span><br><span class="line"></span><br><span class="line">    let result; </span><br><span class="line"></span><br><span class="line">    if ( myNum )&#123;</span><br><span class="line"></span><br><span class="line">      result = myNum;</span><br><span class="line"></span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">      result = 3;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line"></span><br><span class="line">  &#125;   </span><br><span class="line"></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">### 7. 对对象进行 for in 遍历时直接使用迭代值会报错</span><br><span class="line"></span><br><span class="line">  - for in 的方法描述是&quot;遍历能够枚举继承的属性名&quot;</span><br><span class="line"></span><br><span class="line">  - 当遍历对象时必须确认是否对象内继承了该属性</span><br><span class="line"></span><br><span class="line">  所以在遍历时需要加上</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  for（var i in a）{</p><pre><code>if( !a.hasOwnProperty(i) ) continue;//跳过继承的属性//循环体</code></pre><p>  }</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 8.冗余代码报错</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  function test () {</p><pre><code>  let result = &#123;&#125;; // 这里的变量result会有一行白线, 告诉你这个变量没必要定义。  return result</code></pre><p>  }</p><p>  改为</p><pre><code>function test () &#123;  return &#123;&#125;</code></pre><p>  }</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 9.备注(参数缺少)报错</span><br><span class="line"></span><br><span class="line">&gt; 使用备注的时候, 参数一定要写全</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  &#x2F;**</p><ul><li><p>下载文件</p></li><li><p>@param path 路径</p></li><li><p>@param type 文件类型</p></li></ul><p>*&#x2F;</p><p>function downloadFile( path, type, id ) { &#x2F;&#x2F; 参数id下面有白色的线, 提示没有备注</p><p>&#x2F;&#x2F; your code …….</p><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 10. 没有用到的变量报错</span><br><span class="line"></span><br><span class="line">&gt; 定义了一个变量, 之后都没有引用会报黄色错误</span><br><span class="line"></span><br><span class="line">### 11. 监听事件报错</span><br><span class="line"></span><br><span class="line">&gt; 这里并不是强制性会报错，只是引用jquery插件后</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$(‘.btn’).click(function(){})</p><p>改为</p><p>$(‘.btn’).on(‘click’,function(){})</p><p>&#96;&#96;&#96;</p><h3 id="12-html引入路径报错"><a href="#12-html引入路径报错" class="headerlink" title="12.html引入路径报错"></a>12.html引入路径报错</h3><blockquote><p>当引入一段相对路径的文件, 代码块下方会有一条白色横线。</p></blockquote><p>如果你的public文件夹是项目的静态文件根目录，右键public &gt;&gt; Mark Directory as &gt;&gt; Resource Root</p><h3 id="13-unresolved-function-or-method-白色错误"><a href="#13-unresolved-function-or-method-白色错误" class="headerlink" title="13. unresolved function or method $() 白色错误"></a>13. unresolved function or method $() 白色错误</h3><blockquote><p>鼠标放在右边错误上显示以上错误或者类似的错误都是没有引入库的原因</p></blockquote><p>解决方法:</p><ul><li><p>根据以下操作路径 File &gt;&gt; setting &gt;&gt; Languages &amp; Frameworks &gt;&gt; JavaScript &gt;&gt; Libraries 找到面板上面的download按钮</p></li><li><p>ctrl+F 然后输入 jquery 或者其他的什么库，然后点击库下载 ts 验证模块链接。</p></li><li><p>此设置可能会出现 jquery 或其他插件的语法规范。</p></li></ul>]]></content>
    
    <summary type="html">
    
      webstorm 标准配置
    
    </summary>
    
    
      <category term="hexo" scheme="http://buildlove.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>地图瓦片在线爬取</title>
    <link href="http://buildlove.github.io/2018/02/27/map-spider/"/>
    <id>http://buildlove.github.io/2018/02/27/map-spider/</id>
    <published>2018-02-27T08:13:19.000Z</published>
    <updated>2019-02-28T05:13:56.698Z</updated>
    
    <content type="html"><![CDATA[<p>node 的简单爬虫以及静态服务器的搭建</p><span id="more"></span><p>由于很多时候需要在封闭的环境下使用地图底图, 写了一个爬取在线地图瓦片作为静态地图服务器的简单程序, js 代码 180 行, html 不到 10行, 废话不多说直接 <a href="https://github.com/buildlove/grap-map-tiles">github源码</a> 。</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img src="https://upload-images.jianshu.io/upload_images/12240257-c2a246f227a862b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>启动服务</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install</span><br><span class="line">node app.js || npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在本地浏览器中打开 client&#x2F;index.html</p></li><li><p>在页面中滚动鼠标 leaflet 插件会去请求地图瓦片</p></li></ul><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><blockquote><p>app.js</p></blockquote><ul><li><p>服务器接收瓦片请求并判断是否存在该瓦片。</p></li><li><p>存在瓦片则返回瓦片, 不存在则加入缓存等待下载。</p></li></ul><blockquote><p>downloadMap.js</p></blockquote><ul><li><p>缓存链接到数组内。</p></li><li><p>服务端会每隔1秒检查数组内是否有链接 有则去下载。</p></li></ul><h2 id="地图相关"><a href="#地图相关" class="headerlink" title="地图相关"></a>地图相关</h2><ul><li><p>Arcgis 官方使用插件 dojo.js 来接入地图底图。</p></li><li><p>dojo.js 除了展示底图几乎一无是处, dojo.js 和 require.js 有冲突。</p></li><li><p>Arcgis 工具分为制作底图的客户端 ArcMap, 服务器 Arcgis Server。</p></li><li><p>leaflet 有相当多的接口和插件来制作地图工具。</p></li><li><p>ArcMap 在发布服务时一定要设置好参数, 不然 leaflet 不能接入底图。</p></li></ul>]]></content>
    
    <summary type="html">
    
      node 的简单爬虫以及静态服务器的搭建
    
    </summary>
    
    
      <category term="hexo" scheme="http://buildlove.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>js模块加载标准</title>
    <link href="http://buildlove.github.io/2018/01/27/module-common/"/>
    <id>http://buildlove.github.io/2018/01/27/module-common/</id>
    <published>2018-01-27T08:10:29.000Z</published>
    <updated>2019-02-28T05:14:03.306Z</updated>
    
    <content type="html"><![CDATA[<p>js模块加载标准</p><span id="more"></span><p>熟悉模块加载标准之后</p><ol><li><p>浏览器 html 文本插入非常多 script 标签时，异步加载这些标签，使页面响应速度变快。</p></li><li><p>管理代码拆分，前端模块化&#x2F;工程化，便于代码的编写和维护。</p></li><li><p>更快的看懂一个新的项目。</p></li></ol><p>目前最流行的三种模块加载标准是 Commonjs &#x2F; AMD &#x2F; CMD</p><h3 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h3><p>commonjs 简单运用步骤</p><p>1.一个文件一个模块, 文件内定义一个函数a</p><p>2.把对象 { a : a } 赋值给 module.exports 暴露出去。</p><p>3.使用 let moduleA &#x3D; require(“libs&#x2F;a”) 来接收这个模块</p><p>4.moduleA.a() 来执行这个函数</p><p>5.commonjs 标准在浏览器端用不了  </p><blockquote><p>node 使用 commonjs 加载机制</p></blockquote><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>浏览器是同步加载 js 的, 当大量的 script标签同步引入的时候会阻塞页面渲染</p><p>AMD 加载 js 的好处</p><p>  1. 异步加载 script 标签, 减少页面失去响应的时间。</p><p>  2. 实时添加时间戳, 防止开发过程中 js 加载后被缓存(无论怎么改代码都报错,需要强制清空浏览器缓存)。</p><ol start="3"><li>前端模块化, 便于编写和维护。</li></ol><p> </p><blockquote><p>实现前端 AMD 方式加载 js 的前端插件是 require.js</p></blockquote><p>以下是 require.js 的配置&#x2F;自定义模块&#x2F;以及使用的简单例子(以下例子纯属手打, 如果有错误, 无视就好)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// html中引用require.js以及配置</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;javascripts/require.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  require.config(&#123;</span><br><span class="line">    // 给每一个加载的js链接之后添加时间戳,防止插件被缓存。</span><br><span class="line">    urlArgs: &quot;v=&quot; + (new Date()).getTime()</span><br><span class="line">    waitSeconds: 0,</span><br><span class="line">    paths: &#123;</span><br><span class="line">        &#x27;jquery&#x27;: &#x27;javascripts/jquery.min&#x27;,</span><br><span class="line">        &#x27;angular&#x27;: &#x27;javascripts/angular.min&#x27;,</span><br><span class="line">        &#x27;myjs&#x27;: &#x27;javascripts/myjs&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    shim: &#123;</span><br><span class="line">        &#x27;jquery&#x27;:&#123;</span><br><span class="line">            exports: [&#x27;jquery&#x27;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x27;angular&#x27;:&#123;</span><br><span class="line">            deps : [&quot;jquery&quot;]//依赖jquery</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x27;myjs&#x27;:&#123;</span><br><span class="line">            deps : [&quot;jquery&quot;, &quot;angular&quot;]//依赖jquery和angular</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义模块myjs</span><br><span class="line">define(&quot;initMapControll&quot;,[</span><br><span class="line">  &quot;jquery&quot;,</span><br><span class="line">  &quot;angular&quot;</span><br><span class="line">],  function($,angular)&#123;</span><br><span class="line">  function run&#123;</span><br><span class="line">    return &quot;AMD&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  module.export = &#123;</span><br><span class="line">    run: run</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//自定义模块的使用</span><br><span class="line">    require([&quot;myjs&quot;],function(myjs)&#123;</span><br><span class="line">        myjs.run() //打印&quot;AMD&quot;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><blockquote><p>实现前端 CMD 方式加载 js 的前端插件是 sea.js, 是中国人写的。</p></blockquote><ol><li><p>和 require.js 写法上差不多。</p></li><li><p>sea.js 加载方式也是异步加载(加载时会去把模块变为字符串去找一遍依赖, 找到后先加载)。</p></li><li><p>使用 factory 的方式定义模块, 可以在每一个页面配置一个 config.js 文件, sea.js 会自动合并配置文件。</p></li><li><p><a href="http://tinyambition.com/HelloSea.js/index.html">参考资料</a>看到一个有意思的黑科技, 把 node 模块转化为 CMD 或者 AMD 的加载方式让浏览器加载。</p></li></ol><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function (root, factory) &#123;</span><br><span class="line">  if (typeof define === &#x27;function&#x27; &amp;&amp; define.amd) &#123;</span><br><span class="line">    // AMD</span><br><span class="line">    define(&#x27;backbone&#x27;, [&#x27;jquery&#x27;, &#x27;underscore&#x27;], function (jQuery, _) &#123;</span><br><span class="line">      return factory(jQuery, _);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; else if (typeof exports === &#x27;object&#x27;) &#123;</span><br><span class="line">  // Node.js</span><br><span class="line">    module.exports = factory(require(&#x27;jquery&#x27;), require(&#x27;underscore&#x27;));</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // Browser globals</span><br><span class="line">    root.Backbone = factory(root.jQuery, root._);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(this, function (jQuery, _) &#123;</span><br><span class="line">  var Backbone = &#123;&#125;;</span><br><span class="line">  // Backbone code that depends on jQuery and _</span><br><span class="line">  return Backbone;</span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      js模块加载标准
    
    </summary>
    
    
      <category term="js" scheme="http://buildlove.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://buildlove.github.io/2016/11/09/hexo/"/>
    <id>http://buildlove.github.io/2016/11/09/hexo/</id>
    <published>2016-11-09T02:03:40.000Z</published>
    <updated>2019-02-28T05:13:42.398Z</updated>
    
    <content type="html"><![CDATA[<p>hexo学习配置</p><span id="more"></span><h2 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h2><p>Hexo官网 (右侧可以选择中文简体)<br><a href="http://hexo.io/">http://hexo.io/</a></p><p>Hexo 入门<br><a href="http://zipperary.com/categories/hexo/">http://zipperary.com/categories/hexo/</a></p><p>Hexo Admin<br><a href="http://jaredly.github.io/hexo-admin/">http://jaredly.github.io/hexo-admin/</a></p><p>Hexo Theme wiki<br><a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a></p><p>Hexo 静态blog搜索<br><a href="https://swiftype.com/">https://swiftype.com/</a></p><p>Hexo 插件<br><a href="http://hexo.io/plugins/">http://hexo.io/plugins/</a></p><p>Hexo 插件wiki<br><a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="git-deploy上传时提示仓库不存在"><a href="#git-deploy上传时提示仓库不存在" class="headerlink" title="git deploy上传时提示仓库不存在"></a>git deploy上传时提示仓库不存在</h3><pre><code>删除主目录下的.deploy_git文件</code></pre><h3 id="Error-Cannot-find-module-‘-x2F-build-x2F-Release-x2F-DTraceProviderBindings’"><a href="#Error-Cannot-find-module-‘-x2F-build-x2F-Release-x2F-DTraceProviderBindings’" class="headerlink" title="Error: Cannot find module ‘.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings’"></a>Error: Cannot find module ‘.&#x2F;build&#x2F;Release&#x2F;DTraceProviderBindings’</h3><pre><code>错误下面有dtrace-provider.js:17:23这一行，也就是这个文件的位置编辑这个文件/Users/liqi/Dropbox/programs/nodejs/buildlove.github.io/node_modules/.0.7.1@dtrace-provider/dtrace-provider.js直接注释掉</code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var builds = [&#x27;Release&#x27;, &#x27;default&#x27;, &#x27;Debug&#x27;];</span><br><span class="line"></span><br><span class="line">// for (var i in builds) &#123;</span><br><span class="line">//     try &#123;</span><br><span class="line">//         var binding = require(&#x27;./build/&#x27; + builds[i] + &#x27;/DTraceProviderBindings&#x27;);</span><br><span class="line">//         DTraceProvider = binding.DTraceProvider;</span><br><span class="line">//         break;</span><br><span class="line">//     &#125; catch (e) &#123;</span><br><span class="line">//         // if the platform looks like it _should_ have DTrace</span><br><span class="line">//         // available, log a failure to load the bindings.</span><br><span class="line">//         if (process.platform == &#x27;darwin&#x27; ||</span><br><span class="line">//             process.platform == &#x27;sunos&#x27; ||</span><br><span class="line">//             process.platform == &#x27;freebsd&#x27;) &#123;</span><br><span class="line">//             console.error(e);</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure><h2 id="操作命令行"><a href="#操作命令行" class="headerlink" title="操作命令行"></a>操作命令行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo deploy -g</span><br><span class="line">hexo server -g</span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: http://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Screenshot 2015</span><br><span class="line">subtitle: Stay hungry,stay foolish.</span><br><span class="line">description: &#x27;whatever&#x27;</span><br><span class="line">author: Screenshot 2015</span><br><span class="line">language: chinese</span><br><span class="line">email: mkdir_yang@163.com</span><br><span class="line">language: zh-CN</span><br><span class="line"># language: zh-Hans</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="line">url: http://buildlove.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">max_open_file: 100</span><br><span class="line">multi_thread: true</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false</span><br><span class="line">  # auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</span><br><span class="line">## 2: Enable pagination</span><br><span class="line">## 1: Disable pagination</span><br><span class="line">## 0: Fully Disable</span><br><span class="line">archive: 1</span><br><span class="line">category: 1</span><br><span class="line">tag: 1</span><br><span class="line"></span><br><span class="line"># Server 本地服务参数</span><br><span class="line">## Hexo uses Connect as a server</span><br><span class="line">## You can customize the logger format as defined in</span><br><span class="line">## http://www.senchalabs.org/connect/logger.html</span><br><span class="line">port: 4001</span><br><span class="line">logger: true</span><br><span class="line">logger_format:</span><br><span class="line"></span><br><span class="line"># Date / Time format 日期显示格式</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line"># date_format: MMM D YYYY</span><br><span class="line"># time_format: HH:mm:ss</span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination 分页设置</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span><br><span class="line">disqus_shortname:</span><br><span class="line"></span><br><span class="line"># Extensions 插件</span><br><span class="line"># Plugins: http://hexo.io/plugins/</span><br><span class="line"># plugins: 最新版hexo注释掉不报错</span><br><span class="line">#  - hexo-generator-feed</span><br><span class="line">#  - hexo-generator-sitemap</span><br><span class="line"># Themes: http://hexo.io/themes/</span><br><span class="line">theme: pacman</span><br><span class="line"># theme: next</span><br><span class="line"></span><br><span class="line"># Deployment 部署</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  # repository: https://github.com/buildlove/buildlove.github.io.git</span><br><span class="line">  repo: https://github.com/buildlove/buildlove.github.io.git</span><br><span class="line">  # repository: git@github.com:buildlove/buildlove.github.io.git</span><br><span class="line">  # branch: gh-pages</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line"># Others</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5 ##首页默认10篇文章标题 如果值为0不分页</span><br><span class="line"></span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 0 ##归档页面默认10篇文章标题</span><br><span class="line">  yearly: true  ##生成年视图</span><br><span class="line">  monthly: true ##生成月视图</span><br><span class="line"></span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 0 ##标签分类页面默认10篇文章</span><br><span class="line"></span><br><span class="line">category_generator:</span><br><span class="line">  per_page: 0 ###分类页面默认10篇文章</span><br><span class="line"></span><br><span class="line">// rss: /atom.xml 最新版注释掉也能用</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line"></span><br><span class="line">#sitemap</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xm</span><br><span class="line"></span><br><span class="line">swift_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h1 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h1><p>在 &#x2F;source 目录下添加 CNAME 文件, 文件内写入 buildlove.top 即可(域名解析不说了)</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">└── package.json</span><br><span class="line">└── package.json</span><br><span class="line">.deploy：执行hexo deploy命令部署到GitHub上的内容目录</span><br><span class="line">public：执行hexo generate命令，输出的静态网页内容目录</span><br><span class="line">scaffolds：layout模板文件目录，其中的md文件可以添加编辑</span><br><span class="line">scripts：扩展脚本目录，这里可以自定义一些javascript脚本</span><br><span class="line">source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。</span><br><span class="line">_drafts：草稿文章</span><br><span class="line">_posts：发布文章</span><br><span class="line">themes：主题文件目录</span><br><span class="line">_config.yml：全局配置文件，大多数的设置都在这里</span><br><span class="line">package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      用于个人笔记
    
    </summary>
    
      <category term="hexo学习配置" scheme="http://buildlove.github.io/categories/hexo%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="hexo" scheme="http://buildlove.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>centos上配置mongodb</title>
    <link href="http://buildlove.github.io/2016/10/13/mongoose/"/>
    <id>http://buildlove.github.io/2016/10/13/mongoose/</id>
    <published>2016-10-13T09:02:12.000Z</published>
    <updated>2019-02-28T05:14:08.691Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb 使用方式</p><span id="more"></span><p>主要目录文件所在位置<br>path: &#x2F;usr&#x2F;local&#x2F;mongodb<br>mongod.lock: 根目录&#x2F;data&#x2F;db&#x2F;mongod.lock<br>logpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;logs&#x2F;mongodb.log<br>&#x2F;data&#x2F;db: 根目录&#x2F;data&#x2F;db<br>配置文件：&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongodb.conf</p><h2 id="下载安装包-解压-移动到-x2F-usr-x2F-local目录下并改名"><a href="#下载安装包-解压-移动到-x2F-usr-x2F-local目录下并改名" class="headerlink" title="下载安装包-解压-移动到&#x2F;usr&#x2F;local目录下并改名"></a>下载安装包-解压-移动到&#x2F;usr&#x2F;local目录下并改名</h2><p>wget <a href="https://fastdl.mongodb.org/linux/mongodb-linux-i686-3.0.2.tgz">https://fastdl.mongodb.org/linux/mongodb-linux-i686-3.0.2.tgz</a><br>gzip -d mongodb-linux-i686-3.0.2.tgz<br>tar xvf mongodb-linux-i686-3.0.2.tar<br>mv mongodb-linux-i686-3.0.2 &#x2F;usr&#x2F;local&#x2F;mongodb<br>cd &#x2F;usr&#x2F;local&#x2F;mongodb<br>mkdir db<br>mkdir logs<br>cd bin<br>vi mongodb.conf</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>vi &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;mongodb.conf:dbpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;db<br>写入以下配置项<br>dbpath&#x3D;&#x2F;data&#x2F;db #指定数据库路径<br>logpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;logs&#x2F;mongodb.log #指定打印文件路径<br>port&#x3D;27017  #端口<br>fork&#x3D;true   #是否后台运行<br>nohttpinterface&#x3D;true<br>auth&#x3D;true   #是否验证账号密码</p><h2 id="开机自动启动mongodb"><a href="#开机自动启动mongodb" class="headerlink" title="开机自动启动mongodb"></a>开机自动启动mongodb</h2><p>vi &#x2F;etc&#x2F;rc.d&#x2F;rc.local<br>&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod –config &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongodb.conf</p><h2 id="重启一下系统测试下能不能自启"><a href="#重启一下系统测试下能不能自启" class="headerlink" title="重启一下系统测试下能不能自启"></a>重启一下系统测试下能不能自启</h2><p>进入mongodb的shell模式<br>&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod<br>查看数据库列表<br>show dbs<br>当前db版本<br>db.version();</p><h2 id="建立软链接"><a href="#建立软链接" class="headerlink" title="建立软链接"></a>建立软链接</h2><p>ln -s &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongod &#x2F;usr&#x2F;bin<br>ln -s &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongo &#x2F;usr&#x2F;bin</p><h2 id="后台启动或关闭"><a href="#后台启动或关闭" class="headerlink" title="后台启动或关闭"></a>后台启动或关闭</h2><p>启动（必须带着–logpath）<br>mongod –fork –logpath&#x3D;&#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;logs&#x2F;mongodb.log<br>(如果报错child process failed -&gt;&gt; rm -rf &#x2F;data&#x2F;db&#x2F;mongod.lock)</p><p>关闭后台<br>mongo<br>use admin<br>db.shutdownServer()</p><h2 id="远程连接mongodb"><a href="#远程连接mongodb" class="headerlink" title="远程连接mongodb"></a>远程连接mongodb</h2><p>mongo 127.0.0.1:27017&#x2F;test -utest -ptest<br>没有用户名和密码验证的话，直接使用：<br>mongo 127.0.0.1:27017&#x2F;test</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ol><li>数据库用户角色：read、readWrite;</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色：backup、restore；</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root</li><li>间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li><li>内部角色：__system<br>Read：允许用户读取指定数据库<br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile<br>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在admin数据库中可用。超级账号，超级权限</li></ol><h2 id="设置用户"><a href="#设置用户" class="headerlink" title="设置用户"></a>设置用户</h2><p>mongodb默认是不需要账号密码的，如果配置文件内有auth&#x3D;true字段，设置以下账户将开启账号密码<br>mongodb内一个table一个账户，admin表里给予userAdmin可以管理所有用户<br>如果需要管理所有用户，必须use amdin &amp;&amp; db.auth(“superadmin”,”superadmin”)</p><p>use admin 切换到admin账户<br>创建超级管理员<br>mongodb 2.6以后的版本都是createUser之前是addUser<br>一般人不建议用直接使用root<br>db.createUser({<br>    user: “superadmin”,<br>    pwd: “superadmin”,<br>    roles: [<br>      { role: “root”, db: “admin” }<br>    ]<br>})<br>db.auth(“superadmin”, “superadmin”)验证超级管理员的存在(1代表存在0代表不存在)<br>use abc 使用abc数据库(注意：创建用户一定要到指定的表里面然后创建，创建管理员才在admin表里创建)<br>创建用户(用户拥有abc数据库的所有权限)<br>db.createUser({<br>    user: “abc”,<br>    pwd: “abc”,<br>    roles: [<br>      { role: “dbOwner”, db: “abc” }<br>    ]<br>})<br>创建用户之后需要输入账号密码才能登陆mongo<br>mongo -u root -p</p><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>忘掉密码必须先去掉auth&#x3D;true参数，然后清除admin表中的system.users,之后创建账号或者不创建<br>vi &#x2F;usr&#x2F;local&#x2F;mongodb&#x2F;bin&#x2F;mongodb.conf<br>注释掉auth&#x3D;true(这个参数配置意思是需要验证)<br>use admin<br>删除账号密码<br>db.system.users.remove({})<br>重新设置账号密码，重启mongodb</p>]]></content>
    
    <summary type="html">
    
      mongodb 使用方式
    
    </summary>
    
      <category term="database" scheme="http://buildlove.github.io/categories/database/"/>
    
    
      <category term="database" scheme="http://buildlove.github.io/tags/database/"/>
    
      <category term="mongodb" scheme="http://buildlove.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>配置git_diftool工具</title>
    <link href="http://buildlove.github.io/2016/10/08/git-difftool/"/>
    <id>http://buildlove.github.io/2016/10/08/git-difftool/</id>
    <published>2016-10-08T09:09:53.000Z</published>
    <updated>2019-02-28T05:13:28.097Z</updated>
    
    <content type="html"><![CDATA[<p>window 和 mac 下的对比工具配置</p><span id="more"></span><h2 id="首先下载Beyond-Compare"><a href="#首先下载Beyond-Compare" class="headerlink" title="首先下载Beyond Compare"></a>首先下载Beyond Compare</h2><p>windows: <a href="http://www.scootersoftware.com/BCompare-4.1.9.21719.exe">http://www.scootersoftware.com/BCompare-4.1.9.21719.exe</a><br>mac: <a href="http://www.scootersoftware.com/BCompareOSX-4.1.9.21719.zip">http://www.scootersoftware.com/BCompareOSX-4.1.9.21719.zip</a><br>rm -rf “&#x2F;Users&#x2F;$(whoami)&#x2F;Library&#x2F;Application Support&#x2F;Beyond Compare&#x2F;registry.dat”</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>找到git配置文件路径</p><p>windows: C:\Users\liqi.gitconfig<br>mac: ~&#x2F;.gitconfig</p><p>在文件中添加以下代码,需要找到自己的Beyond Compare 4安装路径</p><p>window</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[diff]</span><br><span class="line">tool = bc4</span><br><span class="line">[difftool]</span><br><span class="line">prompt = false</span><br><span class="line">[difftool &quot;bc4&quot;]</span><br><span class="line">cmd = &quot;\&quot;C:\\Program Files\\Beyond Compare 4/bcomp.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;&quot;</span><br><span class="line">[merge]</span><br><span class="line">tool = bc</span><br><span class="line">[mergetool]</span><br><span class="line">prompt = false</span><br><span class="line">[mergetool &quot;bc4&quot;]</span><br><span class="line">cmd = &quot;\&quot;C:\\Program Files\\Beyond Compare 4/bcomp.exe\&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$BASE\&quot; \&quot;$MERGED\&quot;&quot;</span><br></pre></td></tr></table></figure><p>mac</p><p>设置为全局变量sudo ln -s &#x2F;Applications&#x2F;Beyond&#x2F; Compare.app&#x2F;Contents&#x2F;MacOS&#x2F;bcomp &#x2F;usr&#x2F;local&#x2F;bin</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[diff]</span><br><span class="line">  tool = bcomp</span><br><span class="line">[difftool]</span><br><span class="line">  prompt = false</span><br><span class="line">[difftool &quot;bcomp&quot;]</span><br><span class="line">  trustExitCode = true</span><br><span class="line">  cmd = &quot;/usr/local/bin/bcomp&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot;</span><br><span class="line">[merge]</span><br><span class="line">  tool = bcomp</span><br><span class="line">[mergetool]</span><br><span class="line">  prompt = false</span><br><span class="line">[mergetool &quot;bcomp&quot;]</span><br><span class="line">  trustExitCode = true</span><br><span class="line">  cmd = &quot;/usr/local/bin/bcomp&quot; \&quot;$LOCAL\&quot; \&quot;$REMOTE\&quot; \&quot;$BASE\&quot; \&quot;$MERGED\&quot;</span><br></pre></td></tr></table></figure><h2 id="命令行输入git-difftool"><a href="#命令行输入git-difftool" class="headerlink" title="命令行输入git difftool"></a>命令行输入git difftool</h2><p>比对当前文件相对于Head版本的改动<br>git difftool <file_name><br>跳出对面界面则配置成功</p>]]></content>
    
    <summary type="html">
    
      window 和 mac 下的对比工具配置
    
    </summary>
    
      <category term="git difftool(Beyond Compare)" scheme="http://buildlove.github.io/categories/git-difftool-Beyond-Compare/"/>
    
    
      <category term="git" scheme="http://buildlove.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>database</title>
    <link href="http://buildlove.github.io/2016/08/24/database/"/>
    <id>http://buildlove.github.io/2016/08/24/database/</id>
    <published>2016-08-24T10:23:57.000Z</published>
    <updated>2019-02-28T05:13:15.926Z</updated>
    
    <content type="html"><![CDATA[<p>mongodb 和 mysql 安装</p><span id="more"></span><p>#mac内默认全局变量文件<br>etc&#x2F;paths</p><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><p>brew install mongodb<br>brew uninstall mongodb</p><h2 id="mongodb启动命令"><a href="#mongodb启动命令" class="headerlink" title="mongodb启动命令"></a>mongodb启动命令</h2><p>sudo su mongod –config &#x2F;usr&#x2F;local&#x2F;etc&#x2F;mongod.conf<br>另一个命令行使用 mongo<br>#图形化mongo软件<br>Robomongo</p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="初始化mysql密码"><a href="#初始化mysql密码" class="headerlink" title="初始化mysql密码"></a>初始化mysql密码</h2><p>PATH&#x3D;”$PATH”:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin<br>cd usr&#x2F;local&#x2F;mysql&#x2F;bin<br>sudo su</p><h2 id="跳过mysql验证"><a href="#跳过mysql验证" class="headerlink" title="跳过mysql验证"></a>跳过mysql验证</h2><p>.&#x2F;mysqld_safe –skip-grant-tables</p><h2 id="打开mysql，修改密码"><a href="#打开mysql，修改密码" class="headerlink" title="打开mysql，修改密码"></a>打开mysql，修改密码</h2><p>.&#x2F;mysql<br>FLUSH PRIVILEGES;<br>SET PASSWORD FOR ‘root‘@’localhost’ &#x3D; PASSWORD(‘你的新密码’);</p><h2 id="使用账号密码登陆"><a href="#使用账号密码登陆" class="headerlink" title="使用账号密码登陆"></a>使用账号密码登陆</h2><p>mysql -u root -p(“你的密码”)</p><h2 id="图形化mysql软件"><a href="#图形化mysql软件" class="headerlink" title="图形化mysql软件"></a>图形化mysql软件</h2><p>MySQLWorkbench</p>]]></content>
    
    <summary type="html">
    
      mongodb 和 mysql 安装
    
    </summary>
    
      <category term="数据库" scheme="http://buildlove.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="database" scheme="http://buildlove.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>node&amp;npm命令行参数和插件</title>
    <link href="http://buildlove.github.io/2016/07/22/npm/"/>
    <id>http://buildlove.github.io/2016/07/22/npm/</id>
    <published>2016-07-22T04:00:04.000Z</published>
    <updated>2019-02-28T05:14:13.908Z</updated>
    
    <content type="html"><![CDATA[<p>npm 深入一点点了解</p><span id="more"></span><h2 id="npm命令行参数"><a href="#npm命令行参数" class="headerlink" title="npm命令行参数"></a>npm命令行参数</h2><p>全局环境默认路径： “C:\Users\liyang\AppData\Roaming\npm\node_modules” and “&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules”</p><p>npm -v                                               #查看npm安装的版本<br>npm install <name> -g                                #将包安装到全局环境中<br>npm install <name> –save                            #安装模块,加上–save写入目录下package.json内模块依赖<br>npm install git:&#x2F;&#x2F;github.com&#x2F;package&#x2F;path.git        #安装github路径上的包<br>npm install git:&#x2F;&#x2F;github.com&#x2F;package&#x2F;path.git#0.1.0  #安装github路径上版本的包<br>npm install path&#x2F;to&#x2F;somedir                          #安装本地路径包(前提是本地路径里面包含一个完整的包)<br>npm list –depth 0                                   #列出所有当前文件夹安装包<br>npm list -g –depth 0                                #列出npm所有全局安装包<br>npm outdated                                         #列出所有已经过时的包<br>npm update <moduleName>                              #更新node模块<br>npm uninstall <moudleName> –save                    #卸载node模块,加–save删除目录下package.json内模块依赖<br>npm view <moudleName> dependencies                   #查看包的依赖关系<br>npm view <moduleName> repository.url                 #查看包的源文件地址<br>npm init                                             #创建一个package.json文件<br>npm root                                             #查看当前包的安装路径<br>npm root -g                                          #查看全局的包的安装路径<br>npm help json                                        #打开package.json文档<br>npm help npm                                         #打开npm文档<br>npm install npm -g                                   #npm命令来升级npm<br>npm cache clear                                      #清空NPM本地缓存<br>npm config set prefix “c:\nodejs”                    #设置全局安装默认路径<br>npm config set proxy&#x3D;<a href="http://127.0.0.1:8087/">http://127.0.0.1:8087</a>           #proxy – 代理<br>npm config set https_proxy&#x3D;<a href="http://127.0.0.1:8087/">http://127.0.0.1:8087</a>     #https_proxy – https代理<br>npm config set registry “<a href="http://r.cnpmjs.org/&quot;">http://r.cnpmjs.org/&quot;</a>       #网速不好，使用代理下载国内源</p><h2 id="node常用接口"><a href="#node常用接口" class="headerlink" title="node常用接口"></a>node常用接口</h2><h3 id="process文档"><a href="#process文档" class="headerlink" title="process文档"></a>process<a href="http://www.css88.com/archives/4548">文档</a></h3><p>process.pid：当前进程的进程号。<br>process.version：Node的版本，比如v0.10.18。<br>process.platform：当前系统平台，比如Linux。<br>process.title：默认值为“node”，可以自定义该值。<br>process.argv：当前进程的命令行参数数组。<br>process.env：指向当前shell的环境变量，比如process.env.HOME。<br>process.execPath：运行当前进程的可执行文件的绝对路径。<br>process.stdout：指向标准输出。<br>process.stdin：指向标准输入。<br>process.stderr：指向标准错误。<br>process.exit()：退出当前进程。<br>process.cwd()：返回运行当前脚本的工作目录的路径。_<br>process.chdir()：改变工作目录。<br>process.nextTick()：将一个回调函数放在下次事件循环的顶部。</p><h3 id="yargs文档"><a href="#yargs文档" class="headerlink" title="yargs文档"></a>yargs<a href="http://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html">文档</a></h3><p>设置node命令行参数插件</p><h2 id="Package-json-属性说明"><a href="#Package-json-属性说明" class="headerlink" title="Package.json 属性说明"></a>Package.json 属性说明</h2><p>name               #包名。<br>version            #包的版本号。<br>description        #包的描述。<br>homepage           #包的官网 url 。<br>author             #包的作者姓名。<br>contributors       #包的其他贡献者姓名。<br>dependencies       #依赖包列表。如果依赖包没有安装则自动安装<br>repository         #包代码存放的地方的类型可在Github上。<br>main               #模块ID<br>keywords           #关键字</p><h2 id="node-REPL-命令"><a href="#node-REPL-命令" class="headerlink" title="node-REPL 命令"></a>node-REPL 命令</h2><p>ctrl + c - 退出当前终端。<br>ctrl + c 按下两次 - 退出 Node REPL。<br>ctrl + d - 退出 Node REPL.<br>向上&#x2F;向下 键 - 查看输入的历史命令<br>tab 键 - 列出当前命令<br>.help - 列出使用命令<br>.break - 退出多行表达式<br>.clear - 退出多行表达式<br>.save filename - 保存当前的 Node REPL 会话到指定文件<br>.load filename - 载入当前 Node REPL 会话的文件内容。</p>]]></content>
    
    <summary type="html">
    
      npm 深入一点点了解
    
    </summary>
    
      <category term="node&amp;npm命令行参数和插件" scheme="http://buildlove.github.io/categories/node-npm%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="npm" scheme="http://buildlove.github.io/tags/npm/"/>
    
      <category term="node" scheme="http://buildlove.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>python2.7更新到3.4下载pip报错</title>
    <link href="http://buildlove.github.io/2016/03/24/mac-python/"/>
    <id>http://buildlove.github.io/2016/03/24/mac-python/</id>
    <published>2016-03-24T08:39:14.000Z</published>
    <updated>2019-02-28T05:13:51.083Z</updated>
    
    <content type="html"><![CDATA[<p>python 踩过的其中一个坑</p><span id="more"></span><h2 id="一切要从这篇文章说起"><a href="#一切要从这篇文章说起" class="headerlink" title="一切要从这篇文章说起"></a>一切要从这篇文章说起</h2><blockquote><p>[更新mac自带的python2.7到3.4版本][1]: <a href="http://jingyan.baidu.com/article/27fa7326e4809646f8271fc7.html">http://jingyan.baidu.com/article/27fa7326e4809646f8271fc7.html</a><br>[1]:<a href="http://jingyan.baidu.com/article/27fa7326e4809646f8271fc7.html">http://jingyan.baidu.com/article/27fa7326e4809646f8271fc7.html</a></p></blockquote><p>mac顺利的从python2.7到了3.4, 问题来了<br>sudo pip install pillow<br>安装PIL时报错</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File &quot;/usr/bin/easy_install&quot;, line 31</span><br><span class="line">continue</span><br><span class="line">^</span><br><span class="line">TabError: inconsistent use of tabs and spaces in indentation</span><br></pre></td></tr></table></figure><p>(site-packages里面放的是第三方库)冷静下来，首先看一下是否存在<br>&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages<br>这个文件夹如果存在：  </p><p>python &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages&#x2F;pip  </p><p>成功打印不报错，这里其实已经解决了, 只不过每次打印比较麻烦, 建立软链接到“全局变量”  </p><p>sudo ln -s &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages&#x2F;pip pip<br>python pip install pillow<br>注意：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每次pip都要到根目录下</span><br><span class="line">cd /</span><br><span class="line">然后才能python pip install</span><br></pre></td></tr></table></figure><p>200OK&#x3D;&#x3D;&#x3D;开心玩耍  </p><p>如果不存在（下面很可能是我做的多余的步骤）<br>curl -O <a href="https://svn.apache.org/repos/asf/oodt/tools/oodtsite.publisher/trunk/distribute_setup.py">https://svn.apache.org/repos/asf/oodt/tools/oodtsite.publisher/trunk/distribute_setup.py</a><br>sudo python distribute_setup.py<br>sudo rm distribute_setup.py  </p><p>和上面一样使用命令行进入<br>cd &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages<br>python pip install pillow  </p><p>python &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages&#x2F;pip<br>建立软链接到“全局变量”<br>ln -s &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#x2F;lib&#x2F;python3.4&#x2F;site-packages&#x2F;pip pip<br>python pip install pillow  </p><h2 id="首先不建议更换内置的python2-7-更换之后会导致很多不必要的折腾"><a href="#首先不建议更换内置的python2-7-更换之后会导致很多不必要的折腾" class="headerlink" title="首先不建议更换内置的python2.7, 更换之后会导致很多不必要的折腾"></a>首先不建议更换内置的python2.7, 更换之后会导致很多不必要的折腾</h2><p>如果需要python3以上版本的， 在官网上下载安装一般情况下<br>python3 -v 查看或使用<br>如不成功$PATH看是否存在在全局变量当中<br>export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin  加入路径进全局变量<br>export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;Users&#x2F;user&#x2F;.local&#x2F;bin“替换所有全局变量  </p>]]></content>
    
    <summary type="html">
    
      python 踩过的其中一个坑
    
    </summary>
    
      <category term="python" scheme="http://buildlove.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://buildlove.github.io/tags/python/"/>
    
      <category term="mac" scheme="http://buildlove.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>简单的python连接mysql</title>
    <link href="http://buildlove.github.io/2016/03/08/python/"/>
    <id>http://buildlove.github.io/2016/03/08/python/</id>
    <published>2016-03-08T06:27:06.000Z</published>
    <updated>2019-02-28T05:15:03.538Z</updated>
    
    <content type="html"><![CDATA[<p>python 基础学习</p><span id="more"></span><p>环境 win7 python3.4</p><h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><p>pip install virtualenv<br>创建一个目录，命令行进入目录<br>virtualenv –no-site-packages venv<br>进入venv虚拟环境<br>找到..&#x2F;venv&#x2F;Scripts&#x2F;activate这个文件<br>直接拖放到命令行小黑框内回车或者绝对路径复制粘贴到命令行回车<br>(venv) C:\Users\liyang\Desktop\github1\python\myproject&gt;<br>命令行前出现venv的就说明进入另一个独立的python环境</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>windows系统下需要安装PyMySQL连接数据库<br>pip install PyMySQL<br>安装之后在”\myproject\venv\Lib\site-packages\pymysql_<em>init</em>_.py”文件夹写入<br>import pymysql<br>在myproject文件夹下创建一个item.py文件，写入：</p><p>import pymysql<br>conn &#x3D; pymysql.connect(host&#x3D;’127.0.0.1’, port&#x3D;3306, user&#x3D;’root’, passwd&#x3D;’123456’, db&#x3D;’mysql’)<br>cursor &#x3D; conn.cursor()<br>#创建user表<br>cursor.execute(‘create table aaa (id varchar(20) primary key, name varchar(20))’)<br>#插入一行记录， 注意MYSQL的占位符是%s<br>cursor.execute(‘insert into aaa (id, name) values (%s, %s)’, [‘3’, ‘uncle’])<br>#提交<br>conn.commit()<br>cursor.execute(‘select * from aaa where id &#x3D; %s’, [‘3’])<br>values &#x3D; cursor.fetchall()<br>print(values)<br>#删除表<br>cursor.execute(“DROP TABLE IF EXISTS aaa”)</p><p>#关闭Cursor和connection<br>cursor.close()<br>conn.close()</p><p>python item.py<br>&#x2F;&#x2F;((‘3’, ‘uncle’),)<br>不报错说明已经成功了</p><h2 id="普通连接数据库的方法"><a href="#普通连接数据库的方法" class="headerlink" title="普通连接数据库的方法"></a>普通连接数据库的方法</h2><h3 id="启动数据库mysqld-exe-–console"><a href="#启动数据库mysqld-exe-–console" class="headerlink" title="启动数据库mysqld.exe –console"></a>启动数据库mysqld.exe –console</h3><p>打开另一个cmd窗口mysql -u root -p输入账号密码</p><h3 id="创建数据库test"><a href="#创建数据库test" class="headerlink" title="创建数据库test"></a>创建数据库test</h3><p>创建表tbTest<br>create database test;<br>use test;<br>create table tbTest<br>(<br>  first_name varchar(255),<br>  last_name varchar(255),<br>  age int,<br>  sex varchar(255),<br>  income varchar(255)<br>);<br>查看内容<br>show databases;<br>show columns from tbTest;</p><h2 id="普通连接数据库实现增删改查"><a href="#普通连接数据库实现增删改查" class="headerlink" title="普通连接数据库实现增删改查"></a>普通连接数据库实现增删改查</h2><p>!&#x2F;usr&#x2F;bin&#x2F;python<br> -<em>- coding: UTF-8 -</em>-</p><h3 id="引用数据库模块"><a href="#引用数据库模块" class="headerlink" title="引用数据库模块"></a>引用数据库模块</h3><p>import MySQLdb</p><h3 id="打开数据库连接-账号-密码-数据库名称"><a href="#打开数据库连接-账号-密码-数据库名称" class="headerlink" title="打开数据库连接                  账号   密码    数据库名称"></a>打开数据库连接                  账号   密码    数据库名称</h3><p>db &#x3D; MySQLdb.connect(“localhost”,”root”,”123456”,”test” )</p><h3 id="使用cursor-方法获取操作游标"><a href="#使用cursor-方法获取操作游标" class="headerlink" title="使用cursor()方法获取操作游标"></a>使用cursor()方法获取操作游标</h3><p>cursor &#x3D; db.cursor()</p><h3 id="删（删除已经创建好的表tbTest）"><a href="#删（删除已经创建好的表tbTest）" class="headerlink" title="删（删除已经创建好的表tbTest）"></a>删（删除已经创建好的表tbTest）</h3><p>cursor.execute(“DROP TABLE IF EXISTS tbTest”)</p><h3 id="增-创建数据表SQL语句"><a href="#增-创建数据表SQL语句" class="headerlink" title="增(创建数据表SQL语句)"></a>增(创建数据表SQL语句)</h3><p>sql &#x3D; “””CREATE TABLE tbTest (<br>         FIRST_NAME  CHAR(20) NOT NULL,<br>         LAST_NAME  CHAR(20),<br>         AGE INT,<br>         SEX CHAR(1),<br>         INCOME FLOAT )”””<br>cursor.execute(sql)</p><h3 id="改（在表中插入数据）"><a href="#改（在表中插入数据）" class="headerlink" title="改（在表中插入数据）"></a>改（在表中插入数据）</h3><p>sql &#x3D; “””INSERT INTO tbTest(FIRST_NAME,<br>         LAST_NAME, AGE, SEX, INCOME)<br>         VALUES (‘Mac’, ‘Mohan’, 20, ‘M’, 2000)”””<br>try:<br>  cursor.execute(sql)<br>  db.commit()<br>except:<br>  db.rollback()</p><h3 id="查-获取一条数据库打印。"><a href="#查-获取一条数据库打印。" class="headerlink" title="查 获取一条数据库打印。"></a>查 获取一条数据库打印。</h3><p>data &#x3D; cursor.fetchone()<br>print “Database version : %s “ % data</p>]]></content>
    
    <summary type="html">
    
      用于个人笔记
    
    </summary>
    
    
      <category term="python" scheme="http://buildlove.github.io/tags/python/"/>
    
      <category term="mysql" scheme="http://buildlove.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.10遇到的问题</title>
    <link href="http://buildlove.github.io/2015/12/21/ubuntu/"/>
    <id>http://buildlove.github.io/2015/12/21/ubuntu/</id>
    <published>2015-12-21T08:57:01.000Z</published>
    <updated>2019-02-28T05:14:54.457Z</updated>
    
    <content type="html"><![CDATA[<p>linux-ubuntu 基础学习</p><span id="more"></span><h2 id="sudo-apt-get-update出现很多404"><a href="#sudo-apt-get-update出现很多404" class="headerlink" title="sudo apt-get update出现很多404"></a>sudo apt-get update出现很多404</h2><p>替换目录&#x2F;etc&#x2F;apt&#x2F;sources.list中的源<br>网易163<br>deb <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid main restricted universe multiverse<br>deb <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-security main restricted universe multiverse<br>deb <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-updates main restricted universe multiverse<br>deb <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid main restricted universe multiverse<br>deb-src <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</a> lucid-backports main restricted universe multiverse<br>或者搜狐更新服务器：<br>deb <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid main restricted universe multiverse<br>deb <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-security main restricted universe multiverse<br>deb <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-updates main restricted universe multiverse<br>deb <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid main restricted universe multiverse<br>deb-src <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.sohu.com/ubuntu/">http://mirrors.sohu.com/ubuntu/</a> lucid-backports main restricted universe multiverse</p><h2 id="无法修正错误-因为您要求某些软件包保持现状-就是它们破坏了软件包间的依赖关系"><a href="#无法修正错误-因为您要求某些软件包保持现状-就是它们破坏了软件包间的依赖关系" class="headerlink" title="无法修正错误,因为您要求某些软件包保持现状,就是它们破坏了软件包间的依赖关系"></a>无法修正错误,因为您要求某些软件包保持现状,就是它们破坏了软件包间的依赖关系</h2><p>系统设置&gt;软件和更新&gt;其它软件最下面一列的源勾去掉(出现这个错误都是源和环境依赖的问题百度解决)</p><h2 id="chrome无法下载"><a href="#chrome无法下载" class="headerlink" title="chrome无法下载"></a>chrome无法下载</h2><p>在ubuntu软件下载中心下载google-chrome</p><h2 id="QQ无法下载"><a href="#QQ无法下载" class="headerlink" title="QQ无法下载"></a>QQ无法下载</h2><p>目前知道的只能下载国际版的QQ，或者网页QQ</p><h2 id="没办法设置代理-主要是为了第一次登陆chrome账号同步书签和扩展"><a href="#没办法设置代理-主要是为了第一次登陆chrome账号同步书签和扩展" class="headerlink" title="没办法设置代理(主要是为了第一次登陆chrome账号同步书签和扩展)"></a>没办法设置代理(主要是为了第一次登陆chrome账号同步书签和扩展)</h2><p>在github上面下载switchysharp压缩包并解压（<a href="https://github.com/FelisCatus/switchysharp%EF%BC%89">https://github.com/FelisCatus/switchysharp）</a><br>chrome输入chrome:&#x2F;&#x2F;extensions&#x2F;（或进入 设置-&gt;扩展程序）<br>勾上开发者模式选项-&gt; 点击加载已解压的扩展程序<br>安装上之后会切换到switchysharp设置项<br>http直接填入ip和端口号<br>socks选中socks v5或v4选项 设置好后保存<br>点击如图所示的小地球选择刚刚设置的代理<br><img src="http://7viklp.com1.z0.glb.clouddn.com/yilan/img/blog/ubuntu/proxyset.png" alt="uiset"><br>直接<a href="http://www.google.com已经能打开了/">www.google.com已经能打开了</a> （登陆google邮箱账户，同步扩展和书签）</p><h2 id="Sublime-Text-3的下载安装"><a href="#Sublime-Text-3的下载安装" class="headerlink" title="Sublime Text 3的下载安装"></a>Sublime Text 3的下载安装</h2><p><a href="http://www.sublimetext.com/3%E4%B8%8B%E8%BD%BD64%E4%BD%8D%EF%BC%88%E7%B3%BB%E7%BB%9F%E4%BD%8D64%E4%BD%8D%EF%BC%89%E7%9A%84.deb%E5%AE%89%E8%A3%85%E5%8C%85">http://www.sublimetext.com/3下载64位（系统位64位）的.deb安装包</a><br>(<a href="http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3059_amd64.deb%EF%BC%89%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%90%8E%E5%8F%8C%E5%87%BB%E5%AE%89%E8%A3%85%E3%80%82%E5%AE%89%E8%A3%85%E5%A5%BD%E4%B9%8B%E5%90%8E%EF%BC%8C%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4subl%E5%8D%B3%E5%8F%AF%E6%89%93%E5%BC%80%E7%A8%8B%E5%BA%8F%EF%BC%8C">http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3059_amd64.deb），下载后双击安装。安装好之后，通过命令subl即可打开程序，</a><br>快键键参考：<a href="http://blog.csdn.net/cywosp/article/details/31791881">http://blog.csdn.net/cywosp/article/details/31791881</a><br>插件安装的默认目录：.config&#x2F;sublime-text-3&#x2F;Package(把配置好的插件剪切合并到这里就OK)</p><h2 id="ubuntu-apt-get-update失败"><a href="#ubuntu-apt-get-update失败" class="headerlink" title="ubuntu apt-get update失败"></a>ubuntu apt-get update失败</h2><p>出现错误：E:Could not get lock &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock - open (11: Resource temporarily unavailable)<br>出现这个问题的原因可能是有另外一个程序正在运行，导致资源被锁不可用。而导致资源被锁的原因，可能是上次安装时没正常完成，而导致出现此状况。<br>解决方法：把 &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists 中的文件全部删掉<br>输入以下命令<br>sudo rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lock<br>sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock</p><h2 id="chrome字体替换"><a href="#chrome字体替换" class="headerlink" title="chrome字体替换"></a>chrome字体替换</h2><p>ubuntu字体目录 &#x2F;usr&#x2F;share&#x2F;fonts<br>windows字体目录 C:&#x2F;&#x2F;Windows&#x2F;Fonts<br>cd &#x2F;usr&#x2F;share&#x2F;fonts<br>sudo mkdir yahei<br>sudo chmod 755 yahei<br>把windows字体复制粘贴到ubuntu（复制粘贴后名称可能不同，正常情况）<br>chrome-&gt;设置（高级设置）-&gt;网页内容（自定义）点开就能换成要的字体</p>]]></content>
    
    <summary type="html">
    
      ubuntu安装出现的问题（问题部分出自虚拟机内的ubuntu）
    
    </summary>
    
      <category term="linux" scheme="http://buildlove.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://buildlove.github.io/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://buildlove.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://buildlove.github.io/2015/12/08/Git/"/>
    <id>http://buildlove.github.io/2015/12/08/Git/</id>
    <published>2015-12-08T08:26:08.000Z</published>
    <updated>2020-08-20T09:07:23.263Z</updated>
    
    <content type="html"><![CDATA[<p>git 常用命令</p><span id="more"></span><h2 id="设置常用别名"><a href="#设置常用别名" class="headerlink" title="设置常用别名"></a>设置常用别名</h2><p>git config <code>--</code>global alias.co checkout<br>git config <code>--</code>global alias.ci commit<br>git config <code>--</code>global alias.br branch<br>git config <code>--</code>global alias.unstage ‘reset HEAD’<br>git config <code>--</code>global alias.last ‘log -1’<br>git config <code>--</code>global alias.lg “log –color –graph –pretty&#x3D;format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>git status 查看本地文件状态<br>git add 加入暂存区<br>git commit -m “why commit” 提交到仓库<br>git commit <code>--</code> amend -m “123” 撤销上次提交<br>git pull origin master 从远程仓库获取最新版本（解决冲突）<br>git push origin master 推送本地修改到远程仓库<br>git tag v1.0.1 给本地修改仓库打上tag（这个每次大的提交都非常有必要打包）<br>git push origin v1.0.1 推送本地修改版本到远程仓库<br>git reflog 打印你的每一次命令（用于版本回退非常牛）<br>git reset <code>--</code>hard HEAD^ 回退到上一版本（后面换成HEAD^100 回退到上100个版本）<br>git reset <code>--</code>hard 版本ID 回退到想要的版本</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>echo “A article” &gt;&gt; readme.txt                                        在readme.txt中新添加一行<br>echo “LICENSE is a new file.” &gt; LICENSE                               新增一个文件<br>cat readme.txt                                                        查看文件<br>rm readme.txt（如果删除错了文件可用 git checkout – readme.txt恢复）       删除文件</p><h2 id="对暂存区和工作区的操作"><a href="#对暂存区和工作区的操作" class="headerlink" title="对暂存区和工作区的操作"></a>对暂存区和工作区的操作</h2><p>git checkout – readme.txt（别名） 丢弃工作区的修改<br>git unstage(别名)                丢弃暂存区的修改</p><h2 id="commit之前，优化提交打印"><a href="#commit之前，优化提交打印" class="headerlink" title="commit之前，优化提交打印"></a>commit之前，优化提交打印</h2><p>git log 查看之前commit的所有打印(如果前3个都是打印的乱七八糟的)<br>git reset HEAD~3 退回<br>git log(再次查看发现退回到第4个)<br>git add -A<br>git commit -m “最终优化版本”<br>git push origin dev 这样就直接合并了前3次的打印为最终优化版本</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>git push origin :dev    删除远程dev分支<br>git push origin dev:dev 提交本地dev分支为远程dev分支（创建远程分支并合并本地分支到远程分支）</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>git checkout master         切换到master分支<br>git merge dev               merge 哎呀冲突了<br>git log                     这时候打开master中冲突文件，删掉冲突的代码<br>git add -A                  重新加入暂存<br>git commit -m ‘修改的代码’    重新提交<br>git push origin master      推送到远程仓库</p><h2 id="设置分支为开发分支"><a href="#设置分支为开发分支" class="headerlink" title="设置分支为开发分支"></a>设置分支为开发分支</h2><p>git push –set-upstream origin dev-1.0.0 设置之后可以使用git pull或git push直接拉取当前版本分支的代码</p><h2 id="其他人修改并push代码到远程dev分支"><a href="#其他人修改并push代码到远程dev分支" class="headerlink" title="其他人修改并push代码到远程dev分支"></a>其他人修改并push代码到远程dev分支</h2><p>git stash                     暂存本地修改<br>git pull –rebase origin dev  从远程拉下同事代码<br>git stash pop                 删除暂存</p><h2 id="公钥和私钥存在于当前目录下的-ssh目录id-rsa-和-id-rsa-pub"><a href="#公钥和私钥存在于当前目录下的-ssh目录id-rsa-和-id-rsa-pub" class="headerlink" title="公钥和私钥存在于当前目录下的.ssh目录id_rsa 和 id_rsa.pub"></a>公钥和私钥存在于当前目录下的.ssh目录id_rsa 和 id_rsa.pub</h2><p>ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#117;&#114;&#x65;&#109;&#97;&#105;&#108;&#64;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;">&#121;&#x6f;&#117;&#114;&#x65;&#109;&#97;&#105;&#108;&#64;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;</a>“                      创建SSH Key 然后一路回车（登陆Github传上去）<br>git remote add origin <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#104;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:buildlove&#x2F;learngit.git       关联远程仓库<br>git push -u origin master                                         推送本地提交到远程master仓库（第一次提交需要加-u）<br>git clone <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;</a>:buildlove&#x2F;learngit.git                   克隆一个远程仓库到本地<br>git pull origin master                                            从远程仓库拉下代码如果有冲突，本地手动解决</p><h2 id="删除远程文件"><a href="#删除远程文件" class="headerlink" title="删除远程文件"></a>删除远程文件</h2><p>git rm -r -n <code>--</code>cached  *&#x2F;node_module&#x2F;*    加上-n这个参数，执行命令时，是不会删除任何文件，要预览删除的文件列表。<br>git rm -r -f <code>--</code>cached *&#x2F;node_module&#x2F;*      删除跟踪状态<br>git rm *&#x2F;node_module&#x2F;* -r -f               删除文件<br>git commit -m “移除src目录下所有文件的版本控制”  提交<br>git push origin master                      提交到远程服务器</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>git branch                查看所有分支<br>git branch dev            创建分支<br>git co -b dev (别名)      创建一个dev分支并切换到dev分支<br>git co                    切换分支<br>git merge <code>--</code>no-ff branch-B 可以将某一分支branch-B合并到分支branch-A并将合并记录提交到历史记录中去,但在合并前必须先切换到分支branch-A。<br>git branch -d dev         删除dev分支</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>git tag                                查看所有本地tag标签<br>git tag v1.0                           给最新提交的commit打上v1.0标签<br>git tag -d v0.1                        删除标签<br>git tag v0.9 6224937                   给id&#x3D;6224937打上标签 v0.9<br>git tag -a v0.1 -m “理由” 6224937      打上标签加上原因<br>git show v0.1                          查看v0.1说明文字<br>git push origin v1.0                   推送标签到远程<br>git push origin :refs&#x2F;tags&#x2F;v0.9        删除远程标签<br>git log <code>--</code>pretty&#x3D;oneline <code>--</code>abbrev-commit查看标签绑定的提交</p><h2 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h2><p>git config <code>--</code>global color.ui true                 配置颜色<br>.gitignore    <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 忽略文档<br>git config <code>--</code>global alias.st status               设置别名格式<br>cat .git&#x2F;config                                   查看git配置（要删除别名 找到alias之后的别名删除即可）</p><h2 id="修改项目根目录下-git-x2F-config配置文件"><a href="#修改项目根目录下-git-x2F-config配置文件" class="headerlink" title="修改项目根目录下.git&#x2F;config配置文件"></a>修改项目根目录下.git&#x2F;config配置文件</h2><p>也能找到全局目录下的git配置文件直接配置</p><p>git init 在目录下配置.git文件<br>[core]<br>  repositoryformatversion &#x3D; 0 版本库格式<br>  filemode &#x3D; false<br>  bare &#x3D; false<br>  logallrefupdates &#x3D; true<br>  symlinks &#x3D; false<br>  ignorecase &#x3D; true<br>  hideDotFiles &#x3D; dotGitOnly<br>[remote “origin”]<br>  url &#x3D; <a href="https://github.com/git/git.git">https://github.com/git/git.git</a>  这个为自己的git仓库url<br>  fetch &#x3D; +refs&#x2F;heads&#x2F;<em>:refs&#x2F;remotes&#x2F;origin&#x2F;</em><br>[branch “master”]<br>  remote &#x3D; origin           git分支<br>  merge &#x3D; refs&#x2F;heads&#x2F;master<br>[user]                      用户自己的个人信息<br>  email &#x3D; <a href="mailto:&#109;&#x6b;&#x64;&#x69;&#114;&#95;&#x79;&#x61;&#x6e;&#103;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#109;&#x6b;&#x64;&#x69;&#114;&#95;&#x79;&#x61;&#x6e;&#103;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a><br>  name &#x3D; buildlove<br>[gui]<br>  wmstate &#x3D; normal<br>  geometry &#x3D; 799x475+200+200 159 214<br>[alias]                      设置的别名,一般别名都设置成全局的<br>  co &#x3D; checkout</p>]]></content>
    
    <summary type="html">
    
      git 常用命令
    
    </summary>
    
      <category term="分布式版本管理工具" scheme="http://buildlove.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="分布式版本管理工具" scheme="http://buildlove.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>photoshop</title>
    <link href="http://buildlove.github.io/2015/11/08/photoshop/"/>
    <id>http://buildlove.github.io/2015/11/08/photoshop/</id>
    <published>2015-11-08T02:20:08.000Z</published>
    <updated>2019-02-28T05:14:21.334Z</updated>
    
    <content type="html"><![CDATA[<p>ps 基础学习</p><span id="more"></span><blockquote><p>[参考视频链接][1]： <a href="http://www.imooc.com/learn/506">http://www.imooc.com/learn/506</a><br>[1]:<a href="http://www.imooc.com/learn/506">http://www.imooc.com/learn/506</a></p></blockquote><h2 id="界面设置"><a href="#界面设置" class="headerlink" title="界面设置"></a>界面设置</h2><p>视图-&gt;标尺（打开）<br>视图-&gt;显示-&gt;智能参考线（打开）<br>自动选择：图层<br>窗口中只勾选 信息 字符 图层 历史记录<br>信息面板设置：第一第二颜色都设置为RGB 标尺设置为像素 勾选文档大小和文档尺寸<br>编辑-&gt;首选项-&gt;单位与标尺 标尺：像素 文字：像素<br>ctrl + 鼠标点击 能看到图层的 大小 像素 字符信息就行</p><p><img src="http://7viklp.com1.z0.glb.clouddn.com/yilan/img/blog/photoshop/ui-set.png" alt="uiset"></p><h2 id="简单工具操作"><a href="#简单工具操作" class="headerlink" title="简单工具操作"></a>简单工具操作</h2><p><img src="http://7viklp.com1.z0.glb.clouddn.com/yilan/img/blog/photoshop/choose-space.png" alt="uiset"><br><strong>选框工具的使用</strong></p><ol><li>新选区</li><li>添加到选区</li><li>从选区中减去4与选区交叉<br>椭圆选框：用shift + 鼠标 可以画圆（先放鼠标 再放shift）</li></ol><h2 id="套索工具"><a href="#套索工具" class="headerlink" title="套索工具"></a>套索工具</h2><ol><li>套索工具（快捷键shift alt 或shift+alt选择加减乘区域 alt按住后可移动选中的区域）</li><li>多边形套索工具（最后双击会闭合区域）</li><li>磁性套索工具</li></ol><h2 id="快速选择工具"><a href="#快速选择工具" class="headerlink" title="快速选择工具"></a>快速选择工具</h2><ol><li>快速选择工具（同上位置：有加有减,可以调节大小）</li><li>魔棒（快速选择小区域，按住shift可多次选择）<blockquote><p>以上三种工具都是选区工具，选区之后在所选区域右键将有更多操作</p></blockquote></li></ol><h2 id="裁剪工具"><a href="#裁剪工具" class="headerlink" title="裁剪工具"></a>裁剪工具</h2><ol><li>裁剪工具（enter键确定所选部分）（选区工具选区之后按裁剪工具会自动识别裁剪最小的等边图形）<br><em>按住alt点击图层前面的眼睛，图片会变成该图层的剪影模式</em></li><li>透视裁剪工具</li><li>切片工具</li><li>切片选择工具</li></ol><h2 id="吸管"><a href="#吸管" class="headerlink" title="吸管"></a>吸管</h2><p>选择点的颜色</p><h2 id="污点修复工具"><a href="#污点修复工具" class="headerlink" title="污点修复工具"></a>污点修复工具</h2><ol><li>污点修复画笔工具（自动修复成和背景一样的颜色）</li><li>修复画笔工具（alt+鼠标选中， 放开alt键 在其它地方可以把选中的复制一遍，放开鼠标会有羽化）</li><li>修补工具（选择一块区域，拖动该区域，用拖动到的区域颜色来替补选择的区域）</li><li>内容感知移动工具</li><li>红眼工具</li></ol><h2 id="画笔工具"><a href="#画笔工具" class="headerlink" title="画笔工具"></a>画笔工具</h2><ol><li>画笔工具（属性栏： 选择区域和边缘硬度）</li><li>铅笔工具（就是细点）</li></ol><h2 id="仿制图章"><a href="#仿制图章" class="headerlink" title="仿制图章"></a>仿制图章</h2><ol><li>仿制图章工具（可以仿制出一样的图案alt+鼠标左键选中 松开鼠标左键在空白位置复制一个图片）</li><li>图案图章工具（工具栏选择图片可以绘制出来）</li></ol><h2 id="历史画笔工具"><a href="#历史画笔工具" class="headerlink" title="历史画笔工具"></a>历史画笔工具</h2><ol><li>历史记录画笔工具（滤镜-&gt;模糊-&gt;高斯模糊）【马赛克】</li><li>历史记录艺术画笔工具</li></ol><h2 id="橡皮檫工具"><a href="#橡皮檫工具" class="headerlink" title="橡皮檫工具"></a>橡皮檫工具</h2><ol><li>橡皮擦工具</li><li>背景橡皮擦工具（擦背景）</li><li>魔术橡皮擦（擦区域）</li></ol><h2 id="渐变工具"><a href="#渐变工具" class="headerlink" title="渐变工具"></a>渐变工具</h2><ol><li>渐变工具（工具区选择图形，拉出渐变图形）</li><li>油漆桶工具</li><li>3D材料拖放工具</li></ol><h2 id="模糊工具"><a href="#模糊工具" class="headerlink" title="模糊工具"></a>模糊工具</h2><ol><li>模糊工具</li><li>锐化工具</li><li>涂抹工具（眼睫毛太短，直接涂抹长）</li></ol><h2 id="减淡工具"><a href="#减淡工具" class="headerlink" title="减淡工具"></a>减淡工具</h2><ol><li>减淡工具</li><li>加深工具</li><li>海绵工具</li></ol><h2 id="钢笔工具"><a href="#钢笔工具" class="headerlink" title="钢笔工具"></a>钢笔工具</h2><ol><li>钢笔工具</li><li>自由钢笔工具</li><li>添加描点工具</li><li>删除描点工具</li><li>转换点工具</li></ol><h2 id="文字工具"><a href="#文字工具" class="headerlink" title="文字工具"></a>文字工具</h2><ol><li>横排文字工具（工具栏调节颜色）</li><li>直排文字工具</li></ol><h2 id="前景色和背景色-用x快捷键替换"><a href="#前景色和背景色-用x快捷键替换" class="headerlink" title="前景色和背景色(用x快捷键替换)"></a>前景色和背景色(用x快捷键替换)</h2><p><strong>其他工具（******）</strong></p><h2 id="图层原理以及操作"><a href="#图层原理以及操作" class="headerlink" title="图层原理以及操作"></a>图层原理以及操作</h2><p>制作一个6图层五环圈在一起<br><img src="http://7viklp.com1.z0.glb.clouddn.com/yilan/img/blog/photoshop/five-circle.png" alt="uiset"></p><h2 id="参考线及其辅助"><a href="#参考线及其辅助" class="headerlink" title="参考线及其辅助"></a>参考线及其辅助</h2><p>视图-&gt;新建参考线（ctrl+r）从边缘拉出参考线 按住Alt可变方向<br><strong>按住alt + v + e可直接弹出参考线选项（alt+字母可对菜单栏操作）</strong><br><strong>ctrl + 分号 隐藏参考线</strong></p><h2 id="传统切图"><a href="#传统切图" class="headerlink" title="传统切图"></a>传统切图</h2><p><strong>切图与切片</strong><br>切图与切片的基本概念和区别</p><p><strong>切片的基本操作及其技巧</strong><br>介绍切片工具及其基本操作<br>介绍切片时候的一些技巧</p><p><strong>导出操作</strong><br>存储为Web所用格式<br>alt + shift + ctrl + s 用来把切片分别存储</p><h2 id="精准切图"><a href="#精准切图" class="headerlink" title="精准切图"></a>精准切图</h2><p><strong>改进切图流程</strong><br>介绍如何利用Photoshop的脚本，进行一种更加快捷精准的切图方法<br>文件-&gt;脚本-&gt;将图层导出到文件 勾上透明区域 勾上裁切图层</p><p>自动化切图，省时省力<br>计算机自动计算，尺寸更精确</p><p>总结 认识基本工具</p><h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><h2 id="动作（对大量图片进行统一处理）"><a href="#动作（对大量图片进行统一处理）" class="headerlink" title="动作（对大量图片进行统一处理）"></a>动作（对大量图片进行统一处理）</h2><p>窗口 -&gt; 动作面板<br>动作面板下面的菜单栏新建动作（给动作取名）<br>录制动作 完成之后可设置快捷键<br>文件-&gt;自动-&gt;批处理<br>可设置对一个文件夹内所有文件进行指定动作</p><p>选中一块区域ctrl + T拖动边界线，复制</p>]]></content>
    
    <summary type="html">
    
      ps 基础学习
    
    </summary>
    
      <category term="绘图" scheme="http://buildlove.github.io/categories/%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="ps" scheme="http://buildlove.github.io/tags/ps/"/>
    
      <category term="photo" scheme="http://buildlove.github.io/tags/photo/"/>
    
  </entry>
  
</feed>
